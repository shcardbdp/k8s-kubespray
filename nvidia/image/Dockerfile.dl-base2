# shinhan-os:cpu - ubuntu:16.04
# shinhan-os:gpu - nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04 # docker pull nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04

ARG DEVICE_TYPE=gpu
ARG VERSION

FROM shcardbdp/shinhan-os:$DEVICE_TYPE

ARG DEVICE_TYPE
ARG VERSION
LABEL version=$VERSION device_type=$DEVICE_TYPE

USER root
# ==================================================================
# base tools/libs
# ------------------------------------------------------------------
RUN APT_INSTALL="apt-get install -y --no-install-recommends" && \
    rm -rf /var/lib/apt/lists/* \
           /etc/apt/sources.list.d/cuda.list \
           /etc/apt/sources.list.d/nvidia-ml.list && \
    sed -Ei 's/^# deb-src /deb-src /' /etc/apt/sources.list && \
    apt-get update && \
# ==================================================================
# tools
# ------------------------------------------------------------------
    DEBIAN_FRONTEND=noninteractive $APT_INSTALL \
        build-essential \
        ca-certificates \
        cmake \
        unzip grep sed dpkg bzip2 rsync \
        zip \
        libglib2.0-0 libxext6 libsm6 libxrender1 \
        libfreetype6-dev libhdf5-serial-dev libpng12-dev libzmq3-dev pkg-config \
        curl \
        wget \
        git \
        vim \
        build-essential \
        unixodbc \
        unixodbc-dev \
        libsasl2-dev \
        alien \
        libaio1 \
        libaio-dev \
        default-jdk \ 
        sudo \
        locales \
        net-tools \
        telnet \
        convmv \
            && \
    rm -rf /var/lib/apt/lists/*

RUN echo "en_US.UTF-8 UTF-8" > /etc/locale.gen && \
    locale-gen

RUN  TINI_VERSION=`curl https://github.com/krallin/tini/releases/latest | grep -o "/v.*\"" | sed 's:^..\(.*\).$:\1:'` && \
    curl -L "https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb" > tini.deb && \
    dpkg -i tini.deb && \
    rm tini.deb && \
    apt-get clean

# ==================================================================
# Connector base
# ------------------------------------------------------------------
ENV SHELL /bin/bash
ENV JAVA_HOME /usr/lib/jvm/java-8-openjdk-amd64
ENV ORACLE_HOME /usr/lib/oracle/12.2/client64  
ENV PATH $JAVA_HOME/bin:$ORACLE_HOME/bin:$PATH 
ENV LD_LIBRARY_PATH /usr/lib/x86_64-linux-gnu:$ORACLE_HOME/lib:/home/jovyan/notebooks/src/shcPython 
ENV LD_PRELOAD /usr/lib/x86_64-linux-gnu/libodbcinst.so 

COPY odbcinst.ini /etc/odbcinst.ini
COPY odbc.ini /etc/odbc.ini
COPY cloudera/ /data/
COPY connector/datalake.properties /etc/datalake/datalake.properties
COPY oracle/ /data/
COPY oracle/tnsnames.ora $ORACLE_HOME/network/admin/

# ==================================================================
# cloudera hive/impala - odbc/jdbc
# ------------------------------------------------------------------
RUN  apt-get install -y -f /data/clouderahiveodbc_2.5.25.1020-2_amd64.deb && \
    apt-get install -y -f /data/clouderaimpalaodbc_2.5.42.1031-2_amd64.deb && \
    rm -rf /opt/cloudera/hiveodbc/lib/64/cloudera.*.ini && \    
    rm -rf /opt/cloudera/impalaodbc/lib/64/cloudera.*.ini && \    
    cp /data/cloudera.*.ini /etc/ && \
    cp /data/HiveJDBC41.jar /data/ImpalaJDBC41.jar /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext

# ==================================================================
# Oracle sqlplus, odbc/jdbc
# ------------------------------------------------------------------
RUN alien -i /data/oracle-instantclient12.2-basic-12.2.0.1.0-1.x86_64.rpm && \
    alien -i /data/oracle-instantclient12.2-sqlplus-12.2.0.1.0-1.x86_64.rpm && \
    alien -i /data/oracle-instantclient12.2-devel-12.2.0.1.0-1.x86_64.rpm && \
    alien -i /data/oracle-instantclient12.2-odbc-12.2.0.1.0-2.x86_64.rpm && \
    alien -i /data/oracle-instantclient12.2-jdbc-12.2.0.1.0-1.x86_64.rpm && \
    cp /usr/lib/oracle/12.2/client64/lib/ojdbc8.jar /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext

# ==================================================================
# Hive JDBC CLI client
# ------------------------------------------------------------------
RUN chmod -R 777 /etc/datalake

# ==================================================================
# User, Home, UID/GID
# ------------------------------------------------------------------
ADD fix-permissions /usr/local/bin/fix-permissions

ENV CONDA_DIR=/opt/conda \    
    NB_USER=jovyan \
    HOME=/home/jovyan \
    NB_UID=1000 \
    NB_GID=100 

RUN useradd -m -s /bin/bash -N -u $NB_UID $NB_USER && \
    mkdir -p $CONDA_DIR && \
    chown $NB_USER:$NB_GID $CONDA_DIR && \
    chmod g+w /etc/passwd /etc/group && \
    rm -rf /home/$NB_USER/.rpmdb && \
    fix-permissions $CONDA_DIR  && \
    fix-permissions $HOME

# Configure environment
ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
ENV PATH $CONDA_DIR/bin:$PATH
ENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH


# Setup work directory for backward-compatibility
USER $NB_UID

RUN mkdir /home/$NB_USER/notebooks && \
    cp $ORACLE_HOME/network/admin/tnsnames.ora /home/$NB_USER/.tnsnames.ora && \
    cp /etc/odbc.ini /home/$NB_USER/.odbc.ini && \
    echo "export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:$ORACLE_HOME/lib" >> /home/$NB_USER/.bashrc && \
    echo "export PATH=$JAVA_HOME/bin:$ORACLE_HOME/bin:$PATH" >> /home/$NB_USER/.bashrc && \
    fix-permissions /home/$NB_USER 

# Install conda as jovyan and check the md5 sum provided on the download site
ENV MINICONDA_VERSION 4.3.30
LABEL MINICONDA=$MINICONDA_VERSION
RUN cd /tmp && \
    wget --quiet https://repo.continuum.io/miniconda/Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh && \
    echo "0b80a152332a4ce5250f3c09589c7a81 *Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh" | md5sum -c - && \
    /bin/bash Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh -f -b -p $CONDA_DIR && \
    rm Miniconda3-${MINICONDA_VERSION}-Linux-x86_64.sh && \
    $CONDA_DIR/bin/conda config --system --prepend channels conda-forge && \
    $CONDA_DIR/bin/conda config --system --set auto_update_conda false && \
    $CONDA_DIR/bin/conda config --system --set show_channel_urls true && \
    $CONDA_DIR/bin/conda update --all --quiet --yes && \
    conda clean -tipsy && \
    echo "export LD_LIBRARY_PATH=/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH" >> /home/$NB_USER/.bashrc && \
    echo "export PATH=$JAVA_HOME/bin:$ORACLE_HOME/bin:$PATH" >> /home/$NB_USER/.bashrc && \
    rm -rf /home/$NB_USER/.cache/yarn && \
    fix-permissions $CONDA_DIR && \
    fix-permissions /home/$NB_USER

ADD connector/dbi.py /opt/conda/lib/python3.6/site-packages/shcard/    

# RUN echo "DEVICE_TYPE : $DEVICE_TYPE"
# RUN  if [ "$DEVICE_TYPE" = "gpu" ] ; then  conda install --quiet --yes tensorflow-gpu==1.12.0 keras==2.2.4 pytorch torchvision -c pytorch ; conda install --yes --quiet -c lukepfister pycuda==2017.1 scikits.cuda; else conda install --quiet --yes tensorflow==1.12.0 keras==2.2.4 pytorch; fi \
#      && conda clean -tipsy  \
#      && fix-permissions $CONDA_DIR && fix-permissions /home/$NB_USER

# Install Jupyter Notebook and Hub
# pytorch requires cudatoolkit and cudnn to be installed
RUN conda install --quiet --yes \
        jupyter \
        notebook \    
        jupyterlab \
        seaborn==0.9.0 \  
        matplotlib==3.0.2 \
        scikit-learn==0.21.2 \
        numpy==1.16.4 \
        pandas==0.24.2 \
        pyspark==2.3 \
        statsmodels==0.9.0 \ 
        scipy==1.3.0 \
        cython==0.29.3 \
        pytest==4.1.1 \
        numba==0.42.0 \
        bokeh==1.0.4 \        
        nltk==3.4 \
        implicit==0.3.7 \
        lightfm==1.15 \
        imbalanced-learn==0.4.3 \
        beautifulsoup4==4.7.1 \
        autopep8==1.4.3 \
        cx_oracle==7.0.0 \
        feather-format \
        swig \
        openmpi \
        pydotplus==2.0.2 \
        networkx==2.2 \
        hyperopt==0.1.2 \
        apscheduler==3.6.0 \
        dask==1.2.0 \
    && conda clean -tipsy && \        
    rm -rf $CONDA_DIR/share/jupyter/lab/staging && \
    rm -rf /home/$NB_USER/.cache/yarn && \
    fix-permissions $CONDA_DIR && \
    fix-permissions /home/$NB_USER

RUN pip install --quiet --no-cache-dir \
        xgboost==0.90 \
        eli5==0.8.1 \ 
        mlxtend==0.15.0.0 \
        lightgbm==2.2.3 \
        catboost==0.14.2 \
        plotnine==0.5.1 \
        missingno==0.4.1 \
        pyLDAvis==2.1.2 \
        Edward \
        dfply \
        dplython \
        schedule==0.6.0 \
        surprise==0.1 \
        # tensorflowonspark==1.4.2 \        #tensorflow 설치 이후 설치
        # tensorboard_logger==0.1.0 \       #tensorflow 설치 이후 설치
        # tensorboard_pytorch==0.7.1 \      #tensorflow 설치 이후 설치
        # tensorboardX==1.6 \               #tensorflow 설치 이후 설치
        # horovod==0.16.2 \                 #tensorflow 설치 이후 설치
        ipython-memory-usage==1.1 \
        nbresuse==0.3.0 \   
        gensim==3.7.0 \
        fasttext==0.8.3 \
        konlpy==0.5.1 \
        pycm==1.8 \
        apyori==1.1.1 \
        pySnooper \
        #https://s3.amazonaws.com/h2o-release/datatable/stable/datatable-0.6.0/datatable-0.6.0-cp36-cp36m-linux_x86_64.whl \
    && \
    rm -rf /home/$NB_USER/.cache/yarn 

# ==================================================================
# Hive/impala, odbc connector
# ------------------------------------------------------------------
RUN conda install --yes --quiet  \
        thrift \
        thrift_sasl \
        impyla==0.14.1 \
        plotly==3.5.0 \
        && \
    conda clean -tipsy && \
    rm -rf /home/$NB_USER/.cache/yarn && \
    fix-permissions $CONDA_DIR && \
    fix-permissions /home/$NB_USER

RUN pip install --quiet --no-cache-dir \
        thriftpy \
        pyodbc==4.0.25 \
        cufflinks==0.14.6 \
    && \
    rm -rf /home/$NB_USER/.cache/yarn 

USER root
WORKDIR /home/$NB_USER
COPY entrypoint.sh /usr/local/bin/

RUN  if [ "$DEVICE_TYPE" = "gpu" ] ; then ln -s /usr/local/cuda-9.0/lib64/libcurand.so.9.0 /usr/local/cuda-9.0/lib64/libcurand.so.8.0 ; fi
# Set up our notebook config.
COPY  jupyter/mllight/jupyter_notebook_config.py /etc/jupyter/
COPY  run_jupyter.sh /usr/local/bin/
RUN rm -rf /home/$NB_USER/work && \
    fix-permissions /etc/jupyter/

EXPOSE 8888 6006

ENTRYPOINT [ "/usr/bin/tini", "--", "entrypoint.sh"]
CMD [ "/usr/local/bin/run_jupyter.sh", "--no-browser", "--ip=0.0.0.0", "--allow-root", "--NotebookApp.token="]

# Add fonts for NHN fonts
COPY fonts/ /usr/share/fonts/

USER $NB_UID
